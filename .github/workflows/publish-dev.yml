name: Publish pre-release on Pypi

on:
  workflow_dispatch:

jobs:
  verify-dev-package:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: setup node version
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Extract Github Tag Version
        id: vars
        run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Validate Github Tag Version
        run: |
          echo """
          import sys
          SUFFIX = 'dev'
          if SUFFIX not in sys.argv[1]:
              raise ValueError(f'Tag {sys.argv[1]} does not contain suffix {SUFFIX}')
          """ > /tmp/check.py
          python /tmp/check.py ${{ steps.vars.outputs.tag }}

      - name: Ensure package version has 'dev' suffix
        run: |
          echo """
          import json, sys, os
          SUFFIX = 'dev'
          with open(f\"src{os.sep}taipy{os.sep}gui{os.sep}version.json\") as version_file:
              version_o = json.load(version_file)
          version = f'{version_o.get(\"major\")}.{version_o.get(\"minor\")}.{version_o.get(\"patch\")}'
          if vext := version_o.get(\"ext\"):
              version = f'{version}.{vext}'
          if SUFFIX not in version:
              raise ValueError(f\"version {version} does not contain suffix {SUFFIX}\")
          """ > /tmp/check1.py
          python /tmp/check1.py


  # publish-pre-release-to-pypi:
  #   needs: [test-package]
  #   timeout-minutes: 20
  #   environment: publish
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.8

  #     - name: setup node version
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'


  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install build

  #     - name: Build package
  #       run: python setup.py build_py && python -m build

  #     - name: Publish to PyPI
  #       uses: pypa/gh-action-pypi-publish@release/v1
  #       with:
  #         user: __token__
  #         password: ${{ secrets.PYPI_API_TOKEN }}

  # test-published-dev-package:
  #   needs: [publish-to-pypi]
  #   timeout-minutes: 30
  #   strategy:
  #     matrix:
  #       python-versions: ['3.8','3.9','3.10', '3.11']
  #       os: [ubuntu-latest,windows-latest,macos-latest]
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: ${{ matrix.python-versions }}

  #     - name: Prepare tests on unix
  #       if: matrix.os != 'windows-latest'
  #       run: |
  #         rm -rf src

  #     - name: Prepare tests on windows
  #       if: matrix.os == 'windows-latest'
  #       run: |
  #         rmdir -Recurse -Force src

  #     - name: Prepare tests
  #       run: |
  #         pip install --upgrade pip
  #         pip install pytest pytest-mock playwright pytest-playwright pytest-timeout testbook
  #         pip install ipython ipykernel
  #         ipython kernel install --name "python3" --user
  #         playwright install chromium --with-deps

  #     - name: Install and test package
  #       run: |
  #         pip install --no-cache-dir ${{ github.event.repository.name }}==${{ github.event.inputs.version }}
  #         pytest
